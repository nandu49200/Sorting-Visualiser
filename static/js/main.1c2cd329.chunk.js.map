{"version":3,"sources":["S/mergesort.js","S/quicksort.js","S/bubblesort.js","S/selectionsort.js","SortingVisualizer/SortingVisualizer.jsx","S/insertionsort.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","auxillaryArray","quickSort","startIndex","endIndex","pivotIndex","pivot","swap","partitionArray","javaScriptSortedArray","sort","a","b","console","log","firstArray","secondArray","arraysAreEqual","firstIndex","secondIndex","temp","getBubbleSortAnimations","N","bubbleSort","getSelectionSortAnimations","minIndex","selectionSort","SortingVisualizer","props","state","this","resetArray","randomIntFromInterval","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","isColorChange","barOneIndex","barTwoIndex","barIndex","barStyle","key","insertionSort","getInsertionSortAnimations","RESTORE_TIME","parseInt","restoreStoreButtons","mergeSortedArray","className","map","value","idx","text","title","fontSize","onClick","mergeSort","React","Component","min","max","random","arrayOne","arrayTwo","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1c2cd329.chunk.js","sourcesContent":["//mergesort\n\n\nexport function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, j]);\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, i]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, i]);\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([j, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([j, j]);\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n\n  ","//quicksort\n\nexport function getQuickSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\ngetQuickSortAnimations([7,2,1,6]);\n\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\n    let pivotIndex;\n    if (startIndex < endIndex) {\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\n        quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\n        quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\n    }\n}\n\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\n    let pivot = auxillaryArray[endIndex];\n    let pivotIndex = startIndex;\n    for (let i = startIndex; i <= endIndex - 1; i++) {\n        animations.push([i, endIndex]);\n        animations.push([i, endIndex]);\n        if (auxillaryArray[i] <= pivot) {\n            //Swap these two heights\n            animations.push([i, auxillaryArray[pivotIndex]]);\n            animations.push([pivotIndex, auxillaryArray[i]]);\n            swap(auxillaryArray, i , pivotIndex);\n            pivotIndex++;\n        }\n        else {\n            animations.push([-1, -1]);\n            animations.push([-1, -1]);\n        }\n        animations.push([-1, -1]);\n        animations.push([-1, -1]);\n    }\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    //Swap these two heights\n    animations.push([pivotIndex, auxillaryArray[endIndex]]);\n    animations.push([endIndex, auxillaryArray[pivotIndex]]);\n    swap(auxillaryArray, pivotIndex, endIndex);\n    return pivotIndex;\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","export function getBubbleSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    bubbleSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction bubbleSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 0; i < N - 1; i++) {\n        for (let j = 0; j < N - i -1; j++) {\n            animations.push([j, j + 1]);\n            animations.push([j, j + 1]);\n            if (auxillaryArray[j] > auxillaryArray[j + 1]) {\n                animations.push([j, auxillaryArray[j + 1]]);\n                animations.push([j + 1, auxillaryArray[j]]);\n                swap(auxillaryArray, j, j + 1);\n            }\n            else {\n                animations.push([-1, -1]);\n                animations.push([-1, -1]);\n            }\n        }\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","export function getSelectionSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    selectionSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction selectionSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 0; i < N - 1; i++) {\n        let minIndex = i; //Finding minimum element in unsorted array\n        for (let j = i + 1; j < N; j++) {\n            animations.push([\"comparision1\", j, minIndex]);\n            animations.push([\"comparision2\", j, minIndex]);\n            if (auxillaryArray[j] < auxillaryArray[minIndex]) {\n                minIndex = j;\n            }\n        }\n        animations.push([\"swap\", minIndex, auxillaryArray[i]]);\n        animations.push([\"swap\", i, auxillaryArray[minIndex]]);\n        // Swap the found minimum element with the first element\n        swap(auxillaryArray, minIndex, i);\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","import React from 'react';\nimport {getMergeSortAnimations} from '../S/mergesort.js';\nimport {getQuickSortAnimations} from '../S/quicksort.js';\nimport {getBubbleSortAnimations} from '../S/bubblesort.js';\nimport {getInsertionSortAnimations} from '../S/insertionsort.js';\nimport {getSelectionSortAnimations} from '../S/selectionsort.js';\n\nimport './SortingVisualizer.css';\n\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 60;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 30;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'pink';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 800));\n    }\n    this.setState({array});\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    const [animations,sortArray] = getQuickSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length - 1; i++) {\n        const isColorChange = (i % 6 === 0) || (i % 6 === 1);\n        const arrayBars = document.getElementsByClassName('array-bar');\n        if(isColorChange === true) {\n            const color = (i % 6 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n            const [barOneIndex, barTwoIndex] = animations[i];\n            if(barOneIndex === -1) {\n                continue;\n            }\n            const barOneStyle = arrayBars[barOneIndex].style;\n            const barTwoStyle = arrayBars[barTwoIndex].style;\n            setTimeout(() => {\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n            },i * ANIMATION_SPEED_MS);\n        }\n        else {\n            const [barIndex, newHeight] = animations[i];\n            if (barIndex === -1) {\n                continue;\n            }\n            const barStyle = arrayBars[barIndex].style;\n            setTimeout(() => {\n                barStyle.height = `${newHeight}px`;\n            },i * ANIMATION_SPEED_MS);  \n        }\n    }\n  }\n\n  bubbleSort()  {\n    const [animations,sortArray] = getBubbleSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (i % 4 === 0) || (i % 4 === 1);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (i % 4 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n  }\n\n  insertionSort() {\n\n    const [animations,sortArray] = getInsertionSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n        const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n        const arrayBars = document.getElementsByClassName('array-bar');\n        if(isColorChange === true) {\n            const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n            const [temp, barOneIndex, barTwoIndex] = animations[i];\n            const barOneStyle = arrayBars[barOneIndex].style;\n            const barTwoStyle = arrayBars[barTwoIndex].style;\n            setTimeout(() => {\n                barOneStyle.backgroundColor = color;\n                barTwoStyle.backgroundColor = color;\n            },i * ANIMATION_SPEED_MS);\n        }\n        else {\n            const [temp, barIndex, newHeight] = animations[i];\n            const barStyle = arrayBars[barIndex].style;\n            setTimeout(() => {\n                barStyle.height = `${newHeight}px`;\n            },i * ANIMATION_SPEED_MS);  \n        }\n    }\n    // this.setState({array: sortArray})\n    const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n    setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \n}\n\nselectionSort() {\n\n  const [animations,sortArray] = getSelectionSortAnimations(this.state.array);\n  for (let i = 0; i < animations.length; i++) {\n      const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n      const arrayBars = document.getElementsByClassName('array-bar');\n      if(isColorChange === true) {\n          const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n          const [temp, barOneIndex, barTwoIndex] = animations[i];\n          const barOneStyle = arrayBars[barOneIndex].style;\n          const barTwoStyle = arrayBars[barTwoIndex].style;\n          setTimeout(() => {\n              barOneStyle.backgroundColor = color;\n              barTwoStyle.backgroundColor = color;\n          },i * ANIMATION_SPEED_MS);\n      }\n      else {\n          const [temp, barIndex, newHeight] = animations[i];\n          const barStyle = arrayBars[barIndex].style;\n          setTimeout(() => {\n              barStyle.height = `${newHeight}px`;\n          },i * ANIMATION_SPEED_MS);  \n      }\n  }\n  // this.setState({array: sortArray})\n  const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n  setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \n}\n  // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n    }\n  }\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              \n              height: `${value}px`,\n              text:value\n            }}></div>\n        ))}\n    \n     \n          \n        <div className=\"btn\">\n\n        <button title=\"Generates a new random array\" style={{fontSize:`${19}px`}} onClick={() => this.resetArray()}>Generate New Array</button>\n        <button title=\"O(NlogN) Time Complexity\"  style={{fontSize:`${19}px`}}  onClick={() => this.mergeSort()}>Merge Sort</button>\n        <button title=\"O(N^2) Time Complexity\"  style={{fontSize:`${19}px`}} onClick={() => this.quickSort()}>Quick Sort</button>\n        <button title=\"O(N^2) Time Complexity\" style={{fontSize:`${19}px`}} onClick={() => this.insertionSort()}>Insertion Sort</button>\n        <button title=\"O(N^2) Time Complexity\" style={{fontSize:`${19}px`}} onClick={() => this.selectionSort()}>Selection Sort</button>\n        <button title=\"O(N^2) Time Complexity\"  style={{fontSize:`${19}px`}} onClick={() => this.bubbleSort()}>Bubble Sort</button>\n      \n        </div>\n      </div>\n    );\n  }\n}\n\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}"," \nexport function getInsertionSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    insertionSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction insertionSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 1; i < N; i++) {\n        let key = auxillaryArray[i];\n        let j = i - 1;\n        animations.push([\"comparision1\", j, i]);\n        animations.push([\"comparision2\", j, i]);\n        while(j >= 0 && auxillaryArray[j] > key) {\n            animations.push([\"overwrite\", j + 1, auxillaryArray[j]]);\n            auxillaryArray[j + 1] = auxillaryArray[j];\n            j = j - 1;\n            if(j >= 0) {\n                animations.push([\"comparision1\", j, i]);\n                animations.push([\"comparision2\", j, i]);\n            }     \n        }\n        animations.push([\"overwrite\", j + 1, key]);\n        auxillaryArray[j + 1] = key;\n    }\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}\n","\nimport React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}